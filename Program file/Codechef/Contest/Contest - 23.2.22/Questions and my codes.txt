Contest - 2/23/2022

Attempted - 5
AC - 4 
WA - 1


                                                      A} Shopping Change




Chef went shopping and bought items worth X rupees (1≤X≤100). Unfortunately, Chef only has a single 100

rupees note.

Since Chef is weak at maths, can you help Chef in calculating what money he should get back after paying 100

rupees for those items?
Input Format

    First line will contain T

, the number of test cases. Then the test cases follow.
Each test case consists of a single line containing an integer X

    , the total price of items Chef purchased.

Output Format

For each test case, output in a single line the money Chef has to receive back.
Constraints

    1≤T≤100

1≤X≤100

Sample Input 1

3
1
25
100

Sample Output 1

99
75
0

Explanation

Test case-1: Since chef paid 100
rupees for items worth 1 rupee. He should get back 99

rupees.

Test case-2: Since chef paid 100
rupees for items worth 25 rupees. He should get back 75 rupee


                                                           // VC - AC , CODE

#include<bits/stdc++.h>
using namespace std;
int main()
{
 long long int x,n,i,amnt;
 cin>>n;
 for(i=1;i<=n;i++)
 {
  cin>> x;
  amnt = 100 - x;
  cout<<amnt<<endl;
 }
return 0;
}





                                                                    B} Blackjack




Chef is playing a variant of Blackjack, where 3 numbers are drawn and each number lies between 1 and 10 (with both 1 and 10 inclusive). Chef wins the game when the sum of these 3 numbers is exactly 21

.

Given the first two numbers A
and B, that have been drawn by Chef, what should be 3

-rd number that should be drawn by the Chef in order to win the game?

Note that it is possible that Chef cannot win the game, no matter what is the 3
-rd number. In such cases, report −1

as the answer.
Input Format

    The first line will contain an integer T

- number of test cases. Then the test cases follow.
The first and only line of each test case contains two integers A
and B

    - the first and second number drawn by the Chef.

Output Format

For each testcase, output the 3
-rd number that should be drawn by the Chef in order to win the game. Output −1

if it is not possible for the Chef to win the game.
Constraints

    1≤T≤100

1≤A,B≤10

Sample Input 1

3
1 10
1 5
4 9

Sample Output 1

10
-1
8

Explanation

Test case 1
: The first two numbers are 1 and 10. If the third number will be 10, the resulting sum will be 1+10+10=21. So Chef will win the game if the third number is 10

.

Test case 2
: The first two numbers are 1 and 5. There is no number between 1 and 10, that can make the resulting sum 21. Hence, the answer will be −1 in this test case.




                                                             //VC - AC,CODE

                            


#include<bits/stdc++.h>
using namespace std;
int main()
{
 long long int a,b,c,p,q,n,i;
 cin>>n;
 for(i=1;i<=n;i++)
 {
  cin>>a>>b;

  p = a + b;
  q = 21 - p;

  if(q>10)
  cout<<"-1"<<endl;
  else
  cout<<q<<endl;
 }
return 0;
}



                                                                  C} Too many items



Chef bought N

items from a shop. Although it is hard to carry all these items in hand, so Chef has to buy some polybags to store these items.

1
polybag can contain at most 10

items. What is the minimum number of polybags needed by Chef?
Input Format

    The first line will contain an integer T

- number of test cases. Then the test cases follow.
The first and only line of each test case contains an integer N

    - the number of items bought by Chef.

Output Format

For each test case, output the minimum number of polybags required.
Constraints

    1≤T≤1000

1≤N≤1000

Sample Input 1

3
20
24
99

Sample Output 1

2
3
10

Explanation

Test case-1: Chef will require 2
polybags. Chef can fit 10

items in the first and second polybag each.

Test case-2: Chef will require 3
polybags. Chef can fit 10 items in the first and second polybag each and fit the remaining 4 items in the third polybag.
                                                           


                                                                //VC -AC,CODE




#include<bits/stdc++.h>
using namespace std;
int main()
{
 double a,b;
 long long int i,n;
 cin>>n;
 for(i=1;i<=n;i++)
 {
  cin>>a;
  b = a/10;
  cout<<ceil(b)<<endl;
 }

return 0;
}




                                                              D} Get Lowest Free


Chef goes to the supermarket to buy some items. Luckily there's a sale going on under which Chef gets the following offer:

    If Chef buys 3

items then he gets the item (out of those 3

    items) having the lowest price as free.

For e.g. if Chef bought 3
items with the cost 6, 2 and 4, then he would get the item with cost 2 as free. So he would only have to pay the cost of the other two items which will be 6+4=10

.

Chef buys 3
items having prices A, B and C

respectively. What is the amount of money Chef needs to pay?
Input Format

    The first line will contain an integer T

- number of test cases. Then the test cases follow.
The first and only line of each test case contains three integers A,B,C

    - the prices of the items bought by Chef.

Output Format

For each test case, output the price paid by Chef.
Constraints

    1≤T≤100

1≤A,B,C≤10

Sample Input 1

3
6 2 4
3 3 3
8 4 4

Sample Output 1

10
6
12

Explanation

Test case-1: Explained in the problem statement.

Test case-2: Since all the three items have the same price, Chef will get one of them free and will have to pay the cost of the other two items which will be 3+3=6

.

Test case-3: Chef will get one of the items having price 4
as free and will have to pay the cost of the other two items which will be 8+4=12. 

                                                            
                       
                                                                      // VC - AC,CODE
                            
#include<bits/stdc++.h>
using namespace std;
int main()
{
 long long int a,b,c,p,q,n,i;
 cin>>n;
 for(i=1;i<=n;i++)
 {
  cin>>a>>b>>c;

  p = min(a,min(b,c));
  q = (a + b + c) - p;

  if (a==b && a==c)
  {
      cout<<a+b<<endl;
  }
  else
  cout<<q<<endl;
 }
return 0;








                                                               E} The product mystery 




Given two positive numbers B and C, what is the minimum positive value of A, such that A⋅B is divisible by C

.

Here, A⋅B
denotes the value obtained when A is multiplied by B

.
Input Format

    The first line will contain an integer T

- number of test cases. Then the test cases follow.
The first and only line of each test case contains two integers B
and C

    .

Output Format

For each test case, output the minimum value of A
such that A⋅B is divisible by C

.
Constraints

    1≤T≤105

1≤B,C≤109

Sample Input 1

2
2 4
8 12

Sample Output 1

2
3

Explanation

Test case 1
: We have B=2 and C=4. If we choose A=2, then A⋅B=4, which is divisible by 4. Note that this is minimum positive value of A, such that A⋅B is divisible by C

.

Test case 2
: We have B=8 and C=12. If we choose A=3, then A⋅B=24, which is divisible by 12. Note that this is minimum positive value of A, such that A⋅B is divisible by C.


                                                           // VC - WA, CODE


                
#include<bits/stdc++.h>
using namespace std;
int main()
{
long long int n,b,c,p,q,r,i;

cin>>n;

for(i=1;i<=n;i++)
{
    cin>>b>>c;

     p = max(b,c);
     q = min(b,c);

    if(p%q==0)
    cout<<p/q<<endl;
    else
    for(i=1;i<=p;i++)
    {
        r = (b*i)%c;
        if(r==0)
        {
         cout<<i<<endl;
         break;
        }
    }

}

return 0;
}















